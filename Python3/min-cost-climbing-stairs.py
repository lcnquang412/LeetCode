class Solution:
    def minCostClimbingStairs(self, cost: list[int]) -> int:
        front = cost[0]
        rear = cost[1]
        for i in range(2, len(cost)):
            tmp = rear
            rear = min(front, rear) + cost[i]
            front = tmp
        return min(front, rear)


# a = [10, 15, 20]
# a = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
# a = [834, 126, 286, 127, 163, 707, 520, 332, 502, 174, 434, 451, 112, 732, 780, 684, 363, 284, 256, 102, 376, 865, 834,
#      330, 596, 507, 715, 322, 719, 288, 687, 879, 750, 196, 695, 201, 529, 691, 16, 291, 352, 13, 349, 515, 526, 894,
#      405, 395, 156, 485, 189, 713, 132, 862, 268, 329, 950, 328, 632, 634, 674, 423, 773, 781, 11, 128, 7, 889, 543,
#      796, 189, 924, 800, 683, 622, 689, 829, 996, 57, 103, 722, 299, 897, 901, 216, 426, 961, 860, 228, 296, 131, 995,
#      417, 578, 298, 7, 243, 929, 575, 109, 753, 937, 252, 969, 501, 577, 35, 460, 17, 771, 982, 712, 731, 562, 802, 603,
#      527, 364, 76, 683, 233, 691, 594, 653, 723, 440, 717, 916, 612, 653, 42, 636, 407, 245, 255, 760, 778, 723, 290,
#      739, 419, 453, 442, 911, 299, 250, 900, 962, 76, 140, 496, 274, 512, 48, 986, 900, 399, 884, 979, 887, 754, 37, 2,
#      538, 496, 274, 746, 559, 339, 661, 906, 287, 163, 954, 8, 515, 557, 580, 448, 43, 840, 364, 674, 575, 823, 997,
#      772, 146, 996, 506, 480, 158, 731, 404, 407, 904, 654, 146, 486, 676, 296, 836, 488, 445, 150, 53, 292, 648, 766,
#      661, 307, 929, 247, 652, 199, 466, 70, 740, 975, 605, 583, 907, 235, 96, 458, 653, 381, 380, 946, 848, 301, 998,
#      971, 780, 654, 116, 501, 767, 411, 855, 591, 520, 293, 450, 175, 366, 301, 223, 593, 589, 818, 638, 368, 30, 262,
#      697, 987, 91, 537, 791, 153, 478, 979, 882, 868, 108, 926, 792, 35, 616, 977, 262, 757, 778, 150, 472, 602, 356,
#      396, 434, 791, 627, 541, 697, 165, 696, 454, 954, 237, 953, 875, 968, 409, 318, 921, 353, 619, 232, 274, 724, 575,
#      106, 838, 356, 629, 317, 244, 839, 918, 855, 626, 437, 542, 926, 775, 240, 212, 291, 93, 366, 700, 89, 373, 267,
#      305, 631, 474, 322, 249, 454, 247, 959, 34, 973, 851, 174, 447, 705, 275, 974, 0, 596, 4, 181, 981, 618, 245, 487,
#      104, 494, 689, 467, 204, 655, 197, 973, 747, 768, 143, 265, 630, 776, 318, 989, 932, 149, 784, 112, 48, 829, 906,
#      972, 989, 787, 331, 127, 118, 80, 526, 857, 794, 10, 36, 602, 137, 807, 529, 976, 442, 62, 36, 236, 511, 332, 225,
#      507, 129, 59, 364, 927, 14, 439, 644, 644, 269, 43, 692, 12, 497, 298, 42, 328, 824, 831, 190, 659, 821, 888, 690,
#      755, 114, 714, 984, 720, 989, 877, 309, 235, 681, 459, 851, 968, 469, 782, 733, 164, 923, 704, 864, 963, 28, 252,
#      796, 127, 765, 613, 838, 456, 678, 375, 481, 575, 64, 800, 292, 559, 978, 45, 263, 291, 412, 289, 842, 546, 890,
#      19, 854, 114, 903, 474, 374, 509, 5, 969, 441, 641, 428, 418, 648, 624, 618, 526, 576, 108, 444, 782, 204, 239,
#      388, 560, 817, 54, 561, 405, 818, 404, 565, 178, 976, 163, 420, 527, 860, 274, 80, 227, 242, 89, 182, 523, 838, 17,
#      7, 74, 426, 598, 822, 740, 95, 167, 380, 815, 975, 509, 150, 743, 993, 508, 97, 661, 171, 455, 304, 164, 135, 851,
#      424, 865, 321, 645, 255, 117, 44, 140, 267, 94, 760, 258, 791, 53, 978, 92, 962, 244, 747, 554, 816, 796, 196, 510,
#      107, 343, 94, 383, 430, 858, 698, 470, 196, 141, 113, 653, 637, 190, 0, 250, 298, 804, 165, 811, 939, 161, 919,
#      632, 125, 269, 208, 221, 338, 414, 811, 186, 112, 786, 23, 970, 682, 176, 454, 562, 211, 355, 476, 951, 350, 370,
#      997, 525, 521, 370, 126, 421, 327, 463, 39, 405, 447, 688, 269, 698, 359, 793, 706, 51, 705, 742, 620, 281, 811,
#      431, 186, 370, 750, 363, 101, 86, 973, 616, 501, 999, 40, 834, 959, 207, 968, 921, 234, 25, 778, 136, 937, 547,
#      720, 97, 415, 941, 723, 486, 477, 319, 513, 571, 30, 531, 361, 496, 44, 15, 230, 297, 734, 508, 76, 656, 670, 985,
#      625, 5, 261, 452, 439, 864, 910, 428, 895, 464, 375, 19, 531, 943, 199, 185, 445, 493, 856, 655, 794, 199, 735,
#      450, 999, 790, 784, 280, 58, 703, 353, 177, 905, 553, 550, 60, 371, 415, 483, 939, 482, 431, 331, 752, 329, 860,
#      383, 740, 140, 886, 721, 87, 556, 760, 963, 807, 966, 506, 829, 324, 922, 597, 121, 280, 509, 698, 896, 695, 575,
#      122, 342, 164, 9, 759, 345, 605, 338, 2, 550, 140, 236, 112, 483, 128, 268, 935, 827, 964, 667, 379, 671, 826, 216,
#      96, 92, 481, 186, 78, 102, 291, 890, 750, 319, 683, 14, 336, 626, 320, 367, 558, 880, 987, 848, 507, 679, 826, 685,
#      404, 546, 713, 316, 469, 647, 703, 134, 948, 687, 708, 103, 56, 562, 517, 609, 600, 372, 763, 154, 939, 567, 157,
#      53, 533, 781, 541, 482, 656, 61, 310, 226, 682, 43, 618, 73, 764, 189, 93, 425, 195, 635, 985, 767, 42, 56, 923,
#      659, 570, 576, 475, 673, 173, 298, 809, 227, 854, 751, 692, 845, 104, 569, 120, 458, 435, 239, 369, 97, 742, 252,
#      798, 898, 167, 311, 80, 374, 540, 786, 128, 478, 896, 65, 188, 815, 981, 663, 817, 670, 21, 830, 413, 325, 131,
#      506, 691, 317, 94, 862, 713, 40, 513, 907, 476, 910, 809, 126, 104, 386, 977, 16, 292, 476, 631, 962, 73, 690, 461,
#      652, 804, 242, 765, 485, 379, 818, 553, 652, 38, 906, 14, 688, 487, 456, 249, 347, 187, 647, 86, 567, 684, 273,
#      511, 569, 148, 828, 519, 542, 647, 223, 567, 491, 117, 578, 420, 689, 95, 554, 643, 543, 789, 135, 105, 583, 168,
#      571, 112, 270, 387, 305, 529, 270, 120, 240, 296, 70, 64, 942, 353, 308, 325, 956, 658, 837, 587, 416, 839, 722,
#      123, 934, 125, 323, 880, 571, 847, 80, 745, 266, 129, 987, 167, 292, 636, 32, 194, 120, 715, 973, 270]
solution = Solution()
print(solution.minCostClimbingStairs(a))

# def __init__(self):
#     self.minCost = 999001
#     self.tracking = []
#
#
# def minCostClimbingStairs(self, cost: list[int]) -> int:
#     length = len(cost)
#     self.tracking = [999001] * length
#
#     def goThrough(i, total):
#         nextTotal = total + cost[i]
#         if nextTotal > self.minCost:
#             return
#         if i == length - 1 or i == length - 2:
#             if nextTotal < self.minCost:
#                 self.minCost = nextTotal
#                 print(self.minCost)
#             return
#         else:
#             if nextTotal < self.tracking[i]:
#                 self.tracking[i] = nextTotal
#                 goThrough(i + 1, nextTotal)
#                 goThrough(i + 2, nextTotal)
#
#     goThrough(0, 0)
#     goThrough(1, 0)
#     return self.minCost
