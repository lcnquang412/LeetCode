=== HashMap ===
const map = new Map<string, number>();
map.set("apple", 3);
map.set("banana", 5);

// 🔁 Loop through key-value pairs
for (const [key, value] of map) {
  console.log(`${key} → ${value}`);
}

// 🔁 Loop keys only
for (const key of map.keys()) {
  console.log("key:", key);
}

// 🔁 Loop values only
for (const value of map.values()) {
  console.log("value:", value);
}

=== HashMap (Set) from an array ===
const array: number[] = {1,1,2},
  set = new Set(array);

=== Loop ===
- loop..of => value
- loop..in => key, index

=== Shape ===
- area of triangle with 3 points on 2D:
(1/2) * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 -y2))

- 3 edges is triangle
a + b > c
a + c > b
b + c > a

=== Array ===
- Init array 1D with length and value
let a: number[] = new Array(length).fill(value);

- Init array 2D with row, col and value
let result: number[][] = Array.from({ length: row }, () =>
  Array.from({ length: col }, () => value)
);

- Init array 2D with row, col
let result: number[][] = Array.from({ length: row }, () =>
  new Array(col)
);

- Get Min/Max
let a = [1, 2, 3]
Math.max(...a)

- Add element to first position
cosnt a = 0,
  array = [1, 2, 3]
array.unshift(a)

=== a[i] swap a[j] ===
[a[i], a[j]] = [a[j], a[i]]

=== Transpose Matrix (square only) ===
1   (2)   (3)
4   5     (6)
7   8     9

for (let i = 0; i< n; i++) {
  for (let j = i + 1; j< n; j++){
    [matrix[i][j], mat[j][i]] = [mat[j][i], mat[i][j]]
  }
}

=== TypeScript ===
- Set: new Set<T>()
- Map: new Map<T, T>()

=== Sort ===
array.sort((a, b) => a - b) ==> Ascending