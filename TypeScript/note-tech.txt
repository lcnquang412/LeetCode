=== HashMap ===
const map = new Map<string, number>();
map.set("apple", 3);
map.set("banana", 5);
==> Use for get / set only. Recalculate in set is not recommend.

// 🔁 Loop through key-value pairs
for (const [key, value] of map) {
  console.log(`${key} → ${value}`);
}

// 🔁 Loop keys only
for (const key of map.keys()) {
  console.log("key:", key);
}

// 🔁 Loop values only
for (const value of map.values()) {
  console.log("value:", value);
}

// Map.get(...) => O(n)

=== HashMap (Set) from an array ===
- Get unique elements
const array: number[] = {1,1,2},
  set = new Set(array);

- Convert Set to Array
const array: number[] = [...new Set([1,2,1])]

=== Loop ===
- loop..of => value
- loop..in => key, index

- 3 edges is triangle
a + b > c
a + c > b
b + c > a

=== Array ===
- Init array 1D with length and value
let a: number[] = new Array(length).fill(value);

- Init array 2D with row, col and value
let result: number[][] = Array.from({ length: row }, () =>
  Array.from({ length: col }, () => value)
);

- Init array 2D with row, col
let result: number[][] = Array.from({ length: row }, () =>
  new Array(col)
);

- Get Min/Max
let a = [1, 2, 3]
Math.max(...a)

- Add element to first position
cosnt a = 0,
  array = [1, 2, 3]
array.unshift(a)

- Sum:
const numbers = [1, 2, 3],
  sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0)

- [splice] Remove element => Retrieve the array (index, length)
array.splice(index, number)

- [flat] Array 2D to 1D (left to right) => sub-array elements concatenated into it recursively
let array_1d = [],
  array_2d = [[1,2], [3,4]]

  array_1d = array_2d.flat()

- Method executes in place
sort, unshift

=== a[i] swap a[j] ===
[a[i], a[j]] = [a[j], a[i]]

=== Transpose Matrix (square only) ===
1   (2)   (3)
4   5     (6)
7   8     9

for (let i = 0; i< n; i++) {
  for (let j = i + 1; j< n; j++){
    [matrix[i][j], mat[j][i]] = [mat[j][i], mat[i][j]]
  }
}

=== TypeScript ===
- Set: new Set<T>()
- Map: new Map<T, T>()

=== Sort ===
array.sort((a, b) => a - b) ==> Ascending

=== Stack ===
- push, pop

=== Queue ===
- unshift, pop

=== Math ===
- Combination (tổ hợp) => order is not important
  nCr = n! / [r! * (n - r)!]

- Permutation (chỉnh hợp) => order is important
  nPr = n! / (n - r)!

=== Shape (2D) ===
- area of triangle with 3 points on 2D:
(1/2) * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 -y2))

- 3 points on 2D is not in line (or area = 0)
x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 -y2) === 0

- points lie on a line
  + y = mx + b (slope-intercept form, line crosses the y-axis)
  + Ax + By + C = 0

=== Compare ===
JSON.parse(JSON.stringify(obj)) > {...obj}
array[i] > object[i]